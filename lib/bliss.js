// Generated by CoffeeScript 1.3.3
var Bliss, Tokenizer, Writer, fs, path,
  __slice = [].slice;

if (module !== void 0) {
  fs = require('fs');
  path = require('path');
  Writer = require('./writer');
  Tokenizer = require('./tokenizer');
}

Bliss = (function() {
  var clone, defaults, tokenizer;

  tokenizer = new Tokenizer();

  function Bliss(options) {
    this.options = options;
    this.cache = {};
    this.options = defaults(this.options, {
      ext: '.js.html',
      cacheEnabled: true,
      context: {}
    });
  }

  defaults = function() {
    var k, object, objects, result, v, _i, _len, _ref;
    objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = {};
    for (_i = 0, _len = objects.length; _i < _len; _i++) {
      object = objects[_i];
      if (object != null) {
        for (k in object) {
          v = object[k];
          if ((_ref = result[k]) == null) {
            result[k] = v;
          }
        }
      }
    }
    return result;
  };

  clone = function(object) {
    var k, obj, v;
    obj = {};
    for (k in object) {
      v = object[k];
      obj[k] = v;
    }
    return obj;
  };

  Bliss.prototype.compile = function(source, options) {
    var context, func, self, tmpl, tmplParams, tmplSource, writer;
    self = this;
    options = defaults(options, this.options);
    options.context = defaults(options.context, this.options.context);
    context = options.context;
    context.render = function() {
      var args, dirname, filename, filepath, template, templateOptions;
      filename = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      dirname = path.dirname(options.filename);
      filepath = path.resolve(dirname, filename);
      templateOptions = clone(options);
      templateOptions.filename = filepath;
      template = self.compileFile(filepath, options);
      return template.apply(null, args);
    };
    writer = new Writer();
    writer.write(tokenizer.tokenize(source));
    tmplParams = writer.parameters;
    tmplSource = writer.source(context);
    try {
      func = Function.apply(null, __slice.call(tmplParams).concat([tmplSource]));
      tmpl = func.bind(context);
      tmpl.context = context;
      tmpl.filename = options.filename;
      tmpl.toString = func.toString.bind(func);
      tmpl.toSource = function() {
        return source;
      };
    } catch (error) {
      error.templateSource = tmplSource;
      throw error;
    }
    return tmpl;
  };

  Bliss.prototype.compileFile = function(filename, options) {
    var entry, filepath, p, self, stat, _compileFile;
    self = this;
    options = defaults(options, this.options, {
      filename: filename,
      ext: (p = filename.indexOf('.')) >= 0 ? filename.slice(p) : ''
    });
    options.context = defaults(options.context, this.options.context);
    filepath = filename;
    stat = void 0;
    try {
      stat = fs.statSync(filepath);
    } catch (thrown) {
      try {
        filepath = filepath + options.ext;
        stat = fs.statSync(filepath);
      } catch (thrown) {
        throw thrown;
      }
    }
    _compileFile = function() {
      var source, template;
      source = fs.readFileSync(filepath, 'utf8');
      return template = self.compile(source, options);
    };
    if (options.cacheEnabled) {
      if (this.cache[filepath] != null) {
        entry = this.cache[filepath];
        if (stat.mtime > entry.mtime) {
          entry.filename = filepath;
          entry.mtime = Date.now();
          entry.template = _compileFile();
          this.cache[filepath] = entry;
          return entry.template;
        } else {
          return entry.template;
        }
      } else {
        entry = {};
        entry.filename = filepath;
        entry.mtime = Date.now();
        entry.template = _compileFile();
        this.cache[filepath] = entry;
        return entry.template;
      }
    } else {
      return _compileFile();
    }
  };

  Bliss.prototype.render = function() {
    var args, filename, template;
    filename = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    template = this.compileFile(filename);
    return template.apply(null, args);
  };

  return Bliss;

})();

if (module !== void 0) {
  module.exports = Bliss;
}
